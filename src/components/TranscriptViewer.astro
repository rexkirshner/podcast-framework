---
/**
 * Transcript Viewer Component
 *
 * Displays episode transcript in a collapsible, searchable format
 *
 * Features:
 * - Collapsible transcript section
 * - Client-side search within transcript
 * - Highlight search matches
 * - Timestamped segments (if available)
 * - Copy to clipboard
 */

interface Props {
  transcript?: string;
  segments?: Array<{
    start: number;
    end: number;
    text: string;
  }>;
  episodeNumber: number;
}

const { transcript, segments, episodeNumber } = Astro.props;

// Don't render if no transcript
if (!transcript) {
  return null;
}
---

<div class="mb-12 bg-white rounded-lg shadow-sm p-6" id="transcript-section">
  <!-- Transcript Header -->
  <div class="flex items-center justify-between mb-4">
    <h2 class="text-2xl font-bold text-gray-900">Transcript</h2>
    <div class="flex gap-2">
      <!-- Copy Button -->
      <button
        id="copy-transcript"
        class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition text-sm font-medium inline-flex items-center gap-2"
        aria-label="Copy transcript to clipboard"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
        </svg>
        <span id="copy-text">Copy</span>
      </button>

      <!-- Toggle Button -->
      <button
        id="toggle-transcript"
        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition text-sm font-medium inline-flex items-center gap-2"
        aria-expanded="false"
        aria-controls="transcript-content"
      >
        <span id="toggle-text">Show Transcript</span>
        <svg id="toggle-icon" class="w-4 h-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
    </div>
  </div>

  <!-- Search Bar (initially hidden) -->
  <div id="transcript-search-container" class="mb-4 hidden">
    <div class="relative">
      <input
        type="text"
        id="transcript-search"
        placeholder="Search transcript..."
        class="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        aria-label="Search transcript"
      />
      <svg
        class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
      </svg>
    </div>
    <div id="search-results-info" class="mt-2 text-sm text-gray-600 hidden"></div>
  </div>

  <!-- Transcript Content (initially hidden) -->
  <div
    id="transcript-content"
    class="hidden prose prose-sm max-w-none"
    data-transcript={transcript}
  >
    <div class="max-h-96 overflow-y-auto p-4 bg-gray-50 rounded-lg">
      <div class="transcript-text text-gray-700 leading-relaxed space-y-3">
        {transcript}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.getElementById('toggle-transcript');
    const toggleText = document.getElementById('toggle-text');
    const toggleIcon = document.getElementById('toggle-icon');
    const transcriptContent = document.getElementById('transcript-content');
    const searchContainer = document.getElementById('transcript-search-container');
    const searchInput = document.getElementById('transcript-search') as HTMLInputElement;
    const searchInfo = document.getElementById('search-results-info');
    const copyButton = document.getElementById('copy-transcript');
    const copyText = document.getElementById('copy-text');

    if (!toggleButton || !transcriptContent) return;

    let isExpanded = false;
    const transcriptText = transcriptContent.getAttribute('data-transcript') || '';

    // Toggle transcript visibility
    function toggleTranscript() {
      isExpanded = !isExpanded;

      if (isExpanded) {
        transcriptContent.classList.remove('hidden');
        searchContainer?.classList.remove('hidden');
        toggleText!.textContent = 'Hide Transcript';
        toggleIcon?.classList.add('rotate-180');
        toggleButton.setAttribute('aria-expanded', 'true');
      } else {
        transcriptContent.classList.add('hidden');
        searchContainer?.classList.add('hidden');
        toggleText!.textContent = 'Show Transcript';
        toggleIcon?.classList.remove('rotate-180');
        toggleButton.setAttribute('aria-expanded', 'false');

        // Clear search when collapsing
        if (searchInput) {
          searchInput.value = '';
          highlightMatches('');
        }
      }
    }

    // Highlight search matches in transcript
    function highlightMatches(query: string) {
      const contentEl = transcriptContent.querySelector('.transcript-text');
      if (!contentEl) return;

      if (!query) {
        // Reset to original text with speaker formatting
        contentEl.innerHTML = formatTranscriptHTML(transcriptText);
        searchInfo?.classList.add('hidden');
        return;
      }

      // Escape special regex characters
      const escapedQuery = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      const regex = new RegExp(escapedQuery, 'gi');
      const matches = transcriptText.match(regex);

      if (matches && matches.length > 0) {
        // Highlight matches
        const highlighted = transcriptText.replace(
          regex,
          (match) => `<mark class="bg-yellow-200 px-1 rounded">${match}</mark>`
        );
        contentEl.innerHTML = formatTranscriptHTML(highlighted);

        // Show match count
        searchInfo!.textContent = `Found ${matches.length} match${matches.length === 1 ? '' : 'es'}`;
        searchInfo?.classList.remove('hidden');
      } else {
        // No matches
        contentEl.innerHTML = formatTranscriptHTML(transcriptText);
        searchInfo!.textContent = 'No matches found';
        searchInfo?.classList.remove('hidden');
      }
    }

    // Format transcript with speaker styling
    function formatTranscriptHTML(text: string): string {
      // Replace **Speaker X:** with styled HTML
      return text
        .replace(/\*\*Speaker ([A-Z]):\*\*/g, '<strong class="block mt-4 mb-1 text-blue-600">Speaker $1:</strong>')
        .replace(/\n/g, '<br/>');
    }

    // Copy transcript to clipboard
    async function copyTranscript() {
      try {
        await navigator.clipboard.writeText(transcriptText);
        copyText!.textContent = 'Copied!';
        setTimeout(() => {
          copyText!.textContent = 'Copy';
        }, 2000);
      } catch (error) {
        console.error('Failed to copy:', error);
        copyText!.textContent = 'Error';
        setTimeout(() => {
          copyText!.textContent = 'Copy';
        }, 2000);
      }
    }

    // Initialize transcript formatting on load
    const contentEl = transcriptContent.querySelector('.transcript-text');
    if (contentEl && transcriptText) {
      contentEl.innerHTML = formatTranscriptHTML(transcriptText);
    }

    // Event listeners
    toggleButton.addEventListener('click', toggleTranscript);
    copyButton?.addEventListener('click', copyTranscript);
    searchInput?.addEventListener('input', (e) => {
      highlightMatches((e.target as HTMLInputElement).value);
    });

    // Clear search on Escape
    searchInput?.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        searchInput.value = '';
        highlightMatches('');
      }
    });
  });
</script>

<style>
  /* Smooth transitions */
  #transcript-content {
    transition: all 0.3s ease-in-out;
  }

  #toggle-icon {
    transition: transform 0.3s ease-in-out;
  }

  /* Prose styles for transcript */
  .prose p {
    margin-bottom: 0;
  }

  /* Scrollbar styling */
  .max-h-96::-webkit-scrollbar {
    width: 8px;
  }

  .max-h-96::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }

  .max-h-96::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
  }

  .max-h-96::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
</style>
