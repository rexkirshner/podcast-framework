---
export const prerender = true;

import BaseLayout from "../layouts/BaseLayout.astro";
import { getPodcastInfo } from "../lib/sanity";

const podcastInfo = await getPodcastInfo();
const siteName = podcastInfo?.name || "Podcast";

// If podcast is not active, redirect to 404
if (!podcastInfo?.isActive) {
  return Astro.redirect("/404");
}
---


<BaseLayout
  title={`Contribute - ${siteName}`}
  description={`Share your ideas and help shape the future of ${siteName}. Suggest episode topics, recommend guests, ask questions, or provide feedback.`}
>
  <main class="max-w-3xl mx-auto px-4 py-12 flex-grow">
    <!-- Page Header -->
    <div class="mb-8 text-center">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">Contribute to {siteName}</h1>
      <p class="text-lg text-gray-600">
        Share your ideas and help shape the future of the show
      </p>
    </div>

    <!-- Form -->
    <form id="contribute-form" class="bg-white rounded-lg shadow-md p-8 space-y-6">
      <!-- Contribution Type Selector -->
      <div>
        <label for="contributionType" class="block text-sm font-semibold text-gray-900 mb-2">
          What would you like to share? *
        </label>
        <select
          id="contributionType"
          name="contributionType"
          required
          aria-label="Contribution type"
          aria-describedby="contribution-type-hint"
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="">Select a type...</option>
          <option value="episode-idea">Episode Idea</option>
          <option value="guest-recommendation">Guest Recommendation</option>
          <option value="question">Question for the Show</option>
          <option value="feedback">Feedback</option>
        </select>
        <p id="contribution-type-hint" class="sr-only">
          Select what type of contribution you'd like to make
        </p>
      </div>

      <!-- Dynamic Form Fields Container -->
      <div id="dynamic-fields"></div>

      <!-- Contact Information (Optional) -->
      <div class="border-t pt-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Your Contact Information (Optional)</h3>
        <p class="text-sm text-gray-600 mb-4">
          Submissions can be anonymous. Providing your contact info allows us to follow up with you.
        </p>

        <div class="space-y-4">
          <div>
            <label for="submitterName" class="block text-sm font-medium text-gray-700 mb-1">
              Name
            </label>
            <input
              type="text"
              id="submitterName"
              name="submitterName"
              maxlength="100"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="Your name"
            />
          </div>

          <div>
            <label for="submitterEmail" class="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              id="submitterEmail"
              name="submitterEmail"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="your@email.com"
            />
          </div>
        </div>
      </div>

      <!-- Honeypot (spam protection) -->
      <input type="text" name="website" style="display:none" tabindex="-1" autocomplete="off" />

      <!-- Submit Button -->
      <div class="pt-4">
        <button
          type="submit"
          id="submit-button"
          style="background: var(--color-primary);"
          class="w-full px-6 py-3 text-white font-semibold rounded-lg hover:opacity-90 transition disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Submit
        </button>
      </div>

      <!-- Status Messages -->
      <div id="form-message" class="hidden"></div>
    </form>
  </main>
</BaseLayout>

<script>
  // Form field templates
  const fieldTemplates = {
    'episode-idea': `
      <div class="space-y-4">
        <div>
          <label for="episodeTopic" class="block text-sm font-medium text-gray-700 mb-1">
            Episode Topic * <span class="text-gray-500 text-xs">(max 100 characters)</span>
          </label>
          <input
            type="text"
            id="episodeTopic"
            name="episodeTopic"
            required
            maxlength="100"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="e.g., The Economics of MEV"
          />
        </div>

        <div>
          <label for="episodeDescription" class="block text-sm font-medium text-gray-700 mb-1">
            Description <span class="text-gray-500 text-xs">(optional, max 500 characters)</span>
          </label>
          <textarea
            id="episodeDescription"
            name="episodeDescription"
            maxlength="500"
            rows="5"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="What would this episode cover? What makes it interesting?"
          ></textarea>
          <div class="text-xs text-gray-500 mt-1" id="episodeDescription-count">0 / 500</div>
        </div>

        <div>
          <label for="episodeRationale" class="block text-sm font-medium text-gray-700 mb-1">
            Why This Would Resonate <span class="text-gray-500 text-xs">(optional, max 300 characters)</span>
          </label>
          <textarea
            id="episodeRationale"
            name="episodeRationale"
            maxlength="300"
            rows="3"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Why would the audience find this compelling?"
          ></textarea>
          <div class="text-xs text-gray-500 mt-1" id="episodeRationale-count">0 / 300</div>
        </div>
      </div>
    `,

    'guest-recommendation': `
      <div class="space-y-4">
        <div>
          <label for="guestName" class="block text-sm font-medium text-gray-700 mb-1">
            Guest Name * <span class="text-gray-500 text-xs">(max 100 characters)</span>
          </label>
          <input
            type="text"
            id="guestName"
            name="guestName"
            required
            maxlength="100"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="e.g., Vitalik Buterin"
          />
        </div>

        <div>
          <label for="guestBackground" class="block text-sm font-medium text-gray-700 mb-1">
            Guest Background <span class="text-gray-500 text-xs">(optional, max 300 characters)</span>
          </label>
          <textarea
            id="guestBackground"
            name="guestBackground"
            maxlength="300"
            rows="3"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="What do they do? What's their expertise?"
          ></textarea>
          <div class="text-xs text-gray-500 mt-1" id="guestBackground-count">0 / 300</div>
        </div>

        <div>
          <label for="guestRationale" class="block text-sm font-medium text-gray-700 mb-1">
            Why This Guest <span class="text-gray-500 text-xs">(optional, max 300 characters)</span>
          </label>
          <textarea
            id="guestRationale"
            name="guestRationale"
            maxlength="300"
            rows="3"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="What makes them interesting for the show?"
          ></textarea>
          <div class="text-xs text-gray-500 mt-1" id="guestRationale-count">0 / 300</div>
        </div>

        <div>
          <label for="guestContact" class="block text-sm font-medium text-gray-700 mb-1">
            Guest Contact Info <span class="text-gray-500 text-xs">(optional)</span>
          </label>
          <input
            type="text"
            id="guestContact"
            name="guestContact"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Twitter, LinkedIn, email, or website"
          />
        </div>
      </div>
    `,

    'question': `
      <div class="space-y-4">
        <div>
          <label for="question" class="block text-sm font-medium text-gray-700 mb-1">
            Your Question * <span class="text-gray-500 text-xs">(max 500 characters)</span>
          </label>
          <textarea
            id="question"
            name="question"
            required
            maxlength="500"
            rows="5"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="What would you like to know?"
          ></textarea>
          <div class="text-xs text-gray-500 mt-1" id="question-count">0 / 500</div>
        </div>
      </div>
    `,

    'feedback': `
      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Feedback Type *
          </label>
          <div class="space-y-2">
            <label class="flex items-center">
              <input
                type="radio"
                name="feedbackType"
                value="feedback"
                required
                class="w-4 h-4 text-blue-600 focus:ring-blue-500"
              />
              <span class="ml-2">Feedback</span>
            </label>
            <label class="flex items-center">
              <input
                type="radio"
                name="feedbackType"
                value="suggestion"
                required
                class="w-4 h-4 text-blue-600 focus:ring-blue-500"
              />
              <span class="ml-2">Suggestion</span>
            </label>
            <label class="flex items-center">
              <input
                type="radio"
                name="feedbackType"
                value="bug"
                required
                class="w-4 h-4 text-blue-600 focus:ring-blue-500"
              />
              <span class="ml-2">Issue/Bug Report</span>
            </label>
          </div>
        </div>

        <div>
          <label for="feedbackContent" class="block text-sm font-medium text-gray-700 mb-1">
            Your Feedback * <span class="text-gray-500 text-xs">(max 500 characters)</span>
          </label>
          <textarea
            id="feedbackContent"
            name="feedbackContent"
            required
            maxlength="500"
            rows="5"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Share your thoughts..."
          ></textarea>
          <div class="text-xs text-gray-500 mt-1" id="feedbackContent-count">0 / 500</div>
        </div>
      </div>
    `
  };

  // Update character counters
  function setupCharCounter(fieldId: string, maxLength: number) {
    const field = document.getElementById(fieldId) as HTMLTextAreaElement;
    const counter = document.getElementById(`${fieldId}-count`);

    if (field && counter) {
      field.addEventListener('input', () => {
        counter.textContent = `${field.value.length} / ${maxLength}`;
      });
    }
  }

  // Update form fields based on contribution type
  const contributionTypeSelect = document.getElementById('contributionType') as HTMLSelectElement;
  const dynamicFields = document.getElementById('dynamic-fields') as HTMLDivElement;

  contributionTypeSelect?.addEventListener('change', () => {
    const selectedType = contributionTypeSelect.value;

    if (selectedType && fieldTemplates[selectedType as keyof typeof fieldTemplates]) {
      dynamicFields.innerHTML = fieldTemplates[selectedType as keyof typeof fieldTemplates];

      // Setup character counters for the new fields
      if (selectedType === 'episode-idea') {
        setupCharCounter('episodeDescription', 500);
        setupCharCounter('episodeRationale', 300);
      } else if (selectedType === 'guest-recommendation') {
        setupCharCounter('guestBackground', 300);
        setupCharCounter('guestRationale', 300);
      } else if (selectedType === 'question') {
        setupCharCounter('question', 500);
      } else if (selectedType === 'feedback') {
        setupCharCounter('feedbackContent', 500);
      }
    } else {
      dynamicFields.innerHTML = '';
    }
  });

  // Handle form submission
  const form = document.getElementById('contribute-form') as HTMLFormElement;
  const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
  const formMessage = document.getElementById('form-message') as HTMLDivElement;

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Disable submit button
    submitButton.disabled = true;
    submitButton.textContent = 'Submitting...';

    // Hide previous messages
    formMessage.classList.add('hidden');

    // Get form data
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    // Check honeypot (spam protection)
    if (data.website) {
      // Bot detected - silently fail
      setTimeout(() => {
        showMessage('Thank you for your contribution!', 'success');
        form.reset();
        dynamicFields.innerHTML = '';
        submitButton.disabled = false;
        submitButton.textContent = 'Submit';
      }, 1000);
      return;
    }

    try {
      const response = await fetch('/api/contribute', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        showMessage('Thank you for your contribution! We\'ve received your submission.', 'success');
        form.reset();
        dynamicFields.innerHTML = '';
      } else {
        const error = await response.json();
        showMessage(error.message || 'Something went wrong. Please try again.', 'error');
      }
    } catch (error) {
      showMessage('Failed to submit. Please check your connection and try again.', 'error');
    } finally {
      submitButton.disabled = false;
      submitButton.textContent = 'Submit';
    }
  });

  function showMessage(message: string, type: 'success' | 'error') {
    formMessage.textContent = message;
    formMessage.className = `p-4 rounded-lg ${
      type === 'success'
        ? 'bg-green-50 text-green-800 border border-green-200'
        : 'bg-red-50 text-red-800 border border-red-200'
    }`;
    formMessage.classList.remove('hidden');

    // Scroll to message
    formMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  }
</script>
